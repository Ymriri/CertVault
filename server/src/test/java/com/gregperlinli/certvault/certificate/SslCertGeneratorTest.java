package com.gregperlinli.certvault.certificate;

import com.gregperlinli.certvault.domain.entities.CertGenRequest;
import com.gregperlinli.certvault.domain.entities.CertRenewRequest;
import com.gregperlinli.certvault.domain.entities.GenResponse;
import com.gregperlinli.certvault.domain.entities.SubjectAltName;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.List;

/**
 * SSL Certificate Generator Test
 *
 * @author gregPerlinLi
 * @version 1.0.0
 * @className {@code SslCertGeneratorTest}
 * @date 2025/3/15 14:58
 */
@SpringBootTest
@Slf4j
public class SslCertGeneratorTest {

    @Test
    public void testGenerateSslCertificate() {
        CertGenRequest request = new CertGenRequest("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzNkbTFWZWQzUzQzRWgKTzVvWnBkK1lqaCtFMG9qaTR3QUJDR2pBOFBsOU90WUVkalBwcWdJNnJjR0tvdmtKb2xOdUxmTUZobGZnTEc2TgoxZXlwcE1hUlFuWC9ReUh5azNrZGpCMXdPakFXWlFsZi9BMHdnY2MxanhEbmJnK2s1OTZ2emZuYWQvUkdmYmgzCllYWGQ4ZmJldWk4VEw5UUxtdGhRS0ZZZ1dLckY0SWRuZ2xJUWwrWk9KMkd2TmxYN3p3Z2YxdUlTbkp5K0RnU2kKa0NlRWxabm9aeGloeGhHZGlWSVU1cVJ5Z05IVlptSkc1VENkTXhpWURwVEpaM2pMVHp4bHlxNnpQNTVQMUVZNQprMkRkQ3VFblBYcDVmRWVUSkM2bm5kRFprLzI0MVNneVZ1MzUwUVdxdWc3YkIxN0Q5LzI0NTZocWhqZmVaK0JWCnBLbGtaclVQQWdNQkFBRUNnZ0VBR2NaMkt1Mmh1Q2pETXFlVWlXandCcGRsSHp5VEJjbGRyVWQ0ckM3TzVvUzMKSDg1Wmtja1VZaGthV1hkM0pKN2RPTndVeWlCclJUQUk0ajE5Y0FJWjhidVVKMlpQcFN5SjloaEM1SXNRU1gwdAplWUpJZWhtcG1zRThYejlyekQvVlhmN0N6U3BRTS8waXh3YjJ6OVZZV1Vkd0tMSnVDS2xiSGJ2bENjdGJSc3g5ClpFOC9JOFVvMW9QZGpCOTdBNnQ2WlJQbXhSdWVqYUhiQzNWRHNKTTcrTkhKcXVjTm40dUZ2aDFHRUR4ZjZhMzIKdDh4N013OUx0dEM3QkUzYWFTR3ZTMjd1Q29aeWl3VXU2cFBCRHJOTHRZaHZ1a0ZmRlRkR2k3dzc4Sk9mR1c3aQpWdnVOMThHZVd0dUU4NGY1V2dHb1cyNStOaTNLNWdFZzZzZEVER0szOFFLQmdRRFl2SjdnRFc5UmtxMWNxcFJTCjFVZ1gyNTh6Wm8wYmZQbWg0cjkxSndzZVI3a1ppaDJETFphZlhrUzA0ZlhDSUE1NFd3Vkx2dVdiaVJLQWxxdGoKUUNvUXl0ODVwbzBVNmd5WWtQelVuSGF3eFpyaVRWajlJM0ZCcXVBRVpOeVRHcHp4SVhrOThHV2FnblZlU1BBKwowK1pVS1E0VkhZSFMxOVlSSDcxL2h5VTQ4UUtCZ1FEWXNxNzN3cDVUVWViQnpidjJoZ2cxY0pqeFl0dHowWE9RCjJqOW41ZjBFanRtM3VzbnlsUjMrY2pVNEw5ZzV3bkUzdkdGOFhqbnk4U09sMkc3TWIxTkJyWU9WbUVIS3ZJeFYKYmxsYzJVUHphY3FZcDFVQi9ma1VsRHdGZFV4enFxSmY5K3BVUTFKQTNuUW56ZUkzMWRtZzIySE81SWdqbFFGNApXdklxSTFyTi93S0JnRTlDMDVzK2JvcFhhTHp0eU9adUJ6cHFYOU10V3NkRnNna280am1XdUxNdktac1VibXlOCm5IclZ2Nnlpd2Z4bk9zTjdEZm5BYXpteExDb0liODhSSlJFVkVBT0dUQ3ZzMkFSbmFYN2JaWENLSTNWRk1oa0oKQUI4eXZVLytEc2hoUUNuU3d3TUt5aTF5TGpmMzFwd3paQlU5R21CUWRTekZNQXo5SFpEb3ZJMFJBb0dBWnkwTQpxZUw4UjJlam0zczlsNjlSa1VBL1VnOWp0YzF3WFBQTlpNYllwYWJ1ZXRCdy94T0k2SEd3YlVRNmk2WE5DbUNqCmVmZlRWNTBCQUNJQS8wMnlNbjlQTzViM0hIU1J6TXR4dVFlcGx1ZzBFbUw1MHF6K1A1SWswZVI3dGtiMGNRVTEKaVZGVWhKWm1iOTFUYklwaHlIa3NKTG9qSiszMmVUdTBPZVFEaERrQ2dZRUFwaVZucnBidTNZd2I3WGpBa2hKUQowZE9JejUwaGp4eUh3Mk1xcHBJWjljaHV2WTh4eWRObGFXRU9CbzAxZEFQOVFTa0VUazVWMFQ1ZWc4QlpRb1FECmpieUNXOGkvQis5VXBIME5YakpXL0c5WEZJMHhOdWJTeHhtTUlDZmk1Y1drTm9mK3VGc0FZajZ0RU5RWWdZL3kKZjgwMEhmb0JmbEpNZzcrV0dOSWsyVW89Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K",
                "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ1ekNDQXMrZ0F3SUJBZ0lSQUxPV1BPQTg0TDN2dFhIR1A5N0JCODB3RFFZSktvWklodmNOQVFFTEJRQXcKZ1pveEN6QUpCZ05WQkFZVEFrTk9NUkl3RUFZRFZRUUlEQWxIZFdGdVoyUnZibWN4RHpBTkJnTlZCQWNNQmtOaApiblJ2YmpFVk1CTUdBMVVFQ2d3TVIzSmxaMUJsY214cGJreHBNUkl3RUFZRFZRUUxEQWxEWlhKMFZtRjFiSFF4CkVqQVFCZ05WQkFNTUNVTmxjblJXWVhWc2RERW5NQ1VHQ1NxR1NJYjNEUUVKQVJZWVozSmxaMUJsY214cGJreHAKUUc5MWRHeHZiMnN1WTI5dE1CNFhEVEkxTURNeE5UQTFORE16TTFvWERUSTJNRE14TlRBMU5ETXpNMW93Z1pveApDekFKQmdOVkJBWVRBa05PTVJJd0VBWURWUVFJREFsSGRXRnVaMlJ2Ym1jeER6QU5CZ05WQkFjTUJrTmhiblJ2CmJqRVZNQk1HQTFVRUNnd01SM0psWjFCbGNteHBia3hwTVJJd0VBWURWUVFMREFsRFpYSjBWbUYxYkhReEVqQVEKQmdOVkJBTU1DVU5sY25SV1lYVnNkREVuTUNVR0NTcUdTSWIzRFFFSkFSWVlaM0psWjFCbGNteHBia3hwUUc5MQpkR3h2YjJzdVkyOXRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXQzWnRWWG5kCjB1TnhJVHVhR2FYZm1JNGZoTktJNHVNQUFRaG93UEQ1ZlRyV0JIWXo2YW9DT3EzQmlxTDVDYUpUYmkzekJZWlgKNEN4dWpkWHNxYVRHa1VKMS8wTWg4cE41SFl3ZGNEb3dGbVVKWC93Tk1JSEhOWThRNTI0UHBPZmVyODM1Mm5mMApSbjI0ZDJGMTNmSDIzcm92RXkvVUM1cllVQ2hXSUZpcXhlQ0haNEpTRUpmbVRpZGhyelpWKzg4SUg5YmlFcHljCnZnNEVvcEFuaEpXWjZHY1lvY1lSbllsU0ZPYWtjb0RSMVdaaVJ1VXduVE1ZbUE2VXlXZDR5MDg4WmNxdXN6K2UKVDlSR09aTmczUXJoSnoxNmVYeEhreVF1cDUzUTJaUDl1TlVvTWxidCtkRUZxcm9PMndkZXcvZjl1T2VvYW9ZMwozbWZnVmFTcFpHYTFEd0lEQVFBQm95WXdKREFPQmdOVkhROEJBZjhFQkFNQ0FZWXdFZ1lEVlIwVEFRSC9CQWd3CkJnRUIvd0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUtaU0ZpVkd1dTF0TjFFL0NveEdpWGVVSnludmIKNDNUejBrd0ZhYkczZ0M1QlhVTzdwc2g1aWVVODNkYllXck9IcE5qNW8ycFd6a0dpekU2VE5zZ2g2NFUxSUllQwpUSW9ubFBab2U5T2UvaWs1UjIxRjFTVkhQK0l6dmVGd1FnNXNWZTM2dzlWcm52cnZNcDU0NzVObDcxLzB3dE0vCit0d3hPKzFKMG5hUEd6cEVXelZyMmNMRi9taEFzREpacWZuU08wTVhscUpWSjhhTVZUTStVYWNiSWlQM2hMUXIKa0VRd3g4UW9mMTNOMVY4Ti9leWpUcHlPVzZqREVRWElnK09Iam1BeFBnZ3I1RG9DQksvM3lzZFltWGhJN3p0TwpGQy9zMi9FT1RsQmNzQS83NmhZNkcwUG1ZdnI1ZUxrekc2WklmT25sSFpmVDY5eEJlT08wNDNwdTVBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                "CN",
                "Guangdong",
                "Canton",
                "GregPerlinLi",
                "CertVault",
                "cv.gpl.ac.cn",
                "gregPerlinLi@outlook.com",
                List.of(
                        new SubjectAltName(SubjectAltName.Type.DNS_NAME, "cv.gpl.ac.cn"),
                        new SubjectAltName(SubjectAltName.Type.IP_ADDRESS, "10.18.0.1")
                ),
                30,
                "CertVault");

        GenResponse response = SslCertGenerator.generateSslCertificate(request);

        log.debug(response.toString());
        log.info("SSL Private Key: \n {}", new String(java.util.Base64.getDecoder().decode(response.getPrivkey())));
        log.info("SSL Certificate: \n {}", new String(java.util.Base64.getDecoder().decode(response.getCert())));
        log.info("SSL Certificate Start Date: {}", response.getNotBefore());
        log.info("SSL Certificate End Date: {}", response.getNotAfter());
    }

    @Test
    public void testRenewSslCertificate() {
        CertRenewRequest request = new CertRenewRequest("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzNkbTFWZWQzUzQzRWgKTzVvWnBkK1lqaCtFMG9qaTR3QUJDR2pBOFBsOU90WUVkalBwcWdJNnJjR0tvdmtKb2xOdUxmTUZobGZnTEc2TgoxZXlwcE1hUlFuWC9ReUh5azNrZGpCMXdPakFXWlFsZi9BMHdnY2MxanhEbmJnK2s1OTZ2emZuYWQvUkdmYmgzCllYWGQ4ZmJldWk4VEw5UUxtdGhRS0ZZZ1dLckY0SWRuZ2xJUWwrWk9KMkd2TmxYN3p3Z2YxdUlTbkp5K0RnU2kKa0NlRWxabm9aeGloeGhHZGlWSVU1cVJ5Z05IVlptSkc1VENkTXhpWURwVEpaM2pMVHp4bHlxNnpQNTVQMUVZNQprMkRkQ3VFblBYcDVmRWVUSkM2bm5kRFprLzI0MVNneVZ1MzUwUVdxdWc3YkIxN0Q5LzI0NTZocWhqZmVaK0JWCnBLbGtaclVQQWdNQkFBRUNnZ0VBR2NaMkt1Mmh1Q2pETXFlVWlXandCcGRsSHp5VEJjbGRyVWQ0ckM3TzVvUzMKSDg1Wmtja1VZaGthV1hkM0pKN2RPTndVeWlCclJUQUk0ajE5Y0FJWjhidVVKMlpQcFN5SjloaEM1SXNRU1gwdAplWUpJZWhtcG1zRThYejlyekQvVlhmN0N6U3BRTS8waXh3YjJ6OVZZV1Vkd0tMSnVDS2xiSGJ2bENjdGJSc3g5ClpFOC9JOFVvMW9QZGpCOTdBNnQ2WlJQbXhSdWVqYUhiQzNWRHNKTTcrTkhKcXVjTm40dUZ2aDFHRUR4ZjZhMzIKdDh4N013OUx0dEM3QkUzYWFTR3ZTMjd1Q29aeWl3VXU2cFBCRHJOTHRZaHZ1a0ZmRlRkR2k3dzc4Sk9mR1c3aQpWdnVOMThHZVd0dUU4NGY1V2dHb1cyNStOaTNLNWdFZzZzZEVER0szOFFLQmdRRFl2SjdnRFc5UmtxMWNxcFJTCjFVZ1gyNTh6Wm8wYmZQbWg0cjkxSndzZVI3a1ppaDJETFphZlhrUzA0ZlhDSUE1NFd3Vkx2dVdiaVJLQWxxdGoKUUNvUXl0ODVwbzBVNmd5WWtQelVuSGF3eFpyaVRWajlJM0ZCcXVBRVpOeVRHcHp4SVhrOThHV2FnblZlU1BBKwowK1pVS1E0VkhZSFMxOVlSSDcxL2h5VTQ4UUtCZ1FEWXNxNzN3cDVUVWViQnpidjJoZ2cxY0pqeFl0dHowWE9RCjJqOW41ZjBFanRtM3VzbnlsUjMrY2pVNEw5ZzV3bkUzdkdGOFhqbnk4U09sMkc3TWIxTkJyWU9WbUVIS3ZJeFYKYmxsYzJVUHphY3FZcDFVQi9ma1VsRHdGZFV4enFxSmY5K3BVUTFKQTNuUW56ZUkzMWRtZzIySE81SWdqbFFGNApXdklxSTFyTi93S0JnRTlDMDVzK2JvcFhhTHp0eU9adUJ6cHFYOU10V3NkRnNna280am1XdUxNdktac1VibXlOCm5IclZ2Nnlpd2Z4bk9zTjdEZm5BYXpteExDb0liODhSSlJFVkVBT0dUQ3ZzMkFSbmFYN2JaWENLSTNWRk1oa0oKQUI4eXZVLytEc2hoUUNuU3d3TUt5aTF5TGpmMzFwd3paQlU5R21CUWRTekZNQXo5SFpEb3ZJMFJBb0dBWnkwTQpxZUw4UjJlam0zczlsNjlSa1VBL1VnOWp0YzF3WFBQTlpNYllwYWJ1ZXRCdy94T0k2SEd3YlVRNmk2WE5DbUNqCmVmZlRWNTBCQUNJQS8wMnlNbjlQTzViM0hIU1J6TXR4dVFlcGx1ZzBFbUw1MHF6K1A1SWswZVI3dGtiMGNRVTEKaVZGVWhKWm1iOTFUYklwaHlIa3NKTG9qSiszMmVUdTBPZVFEaERrQ2dZRUFwaVZucnBidTNZd2I3WGpBa2hKUQowZE9JejUwaGp4eUh3Mk1xcHBJWjljaHV2WTh4eWRObGFXRU9CbzAxZEFQOVFTa0VUazVWMFQ1ZWc4QlpRb1FECmpieUNXOGkvQis5VXBIME5YakpXL0c5WEZJMHhOdWJTeHhtTUlDZmk1Y1drTm9mK3VGc0FZajZ0RU5RWWdZL3kKZjgwMEhmb0JmbEpNZzcrV0dOSWsyVW89Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K",
                "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ1ekNDQXMrZ0F3SUJBZ0lSQUxPV1BPQTg0TDN2dFhIR1A5N0JCODB3RFFZSktvWklodmNOQVFFTEJRQXcKZ1pveEN6QUpCZ05WQkFZVEFrTk9NUkl3RUFZRFZRUUlEQWxIZFdGdVoyUnZibWN4RHpBTkJnTlZCQWNNQmtOaApiblJ2YmpFVk1CTUdBMVVFQ2d3TVIzSmxaMUJsY214cGJreHBNUkl3RUFZRFZRUUxEQWxEWlhKMFZtRjFiSFF4CkVqQVFCZ05WQkFNTUNVTmxjblJXWVhWc2RERW5NQ1VHQ1NxR1NJYjNEUUVKQVJZWVozSmxaMUJsY214cGJreHAKUUc5MWRHeHZiMnN1WTI5dE1CNFhEVEkxTURNeE5UQTFORE16TTFvWERUSTJNRE14TlRBMU5ETXpNMW93Z1pveApDekFKQmdOVkJBWVRBa05PTVJJd0VBWURWUVFJREFsSGRXRnVaMlJ2Ym1jeER6QU5CZ05WQkFjTUJrTmhiblJ2CmJqRVZNQk1HQTFVRUNnd01SM0psWjFCbGNteHBia3hwTVJJd0VBWURWUVFMREFsRFpYSjBWbUYxYkhReEVqQVEKQmdOVkJBTU1DVU5sY25SV1lYVnNkREVuTUNVR0NTcUdTSWIzRFFFSkFSWVlaM0psWjFCbGNteHBia3hwUUc5MQpkR3h2YjJzdVkyOXRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXQzWnRWWG5kCjB1TnhJVHVhR2FYZm1JNGZoTktJNHVNQUFRaG93UEQ1ZlRyV0JIWXo2YW9DT3EzQmlxTDVDYUpUYmkzekJZWlgKNEN4dWpkWHNxYVRHa1VKMS8wTWg4cE41SFl3ZGNEb3dGbVVKWC93Tk1JSEhOWThRNTI0UHBPZmVyODM1Mm5mMApSbjI0ZDJGMTNmSDIzcm92RXkvVUM1cllVQ2hXSUZpcXhlQ0haNEpTRUpmbVRpZGhyelpWKzg4SUg5YmlFcHljCnZnNEVvcEFuaEpXWjZHY1lvY1lSbllsU0ZPYWtjb0RSMVdaaVJ1VXduVE1ZbUE2VXlXZDR5MDg4WmNxdXN6K2UKVDlSR09aTmczUXJoSnoxNmVYeEhreVF1cDUzUTJaUDl1TlVvTWxidCtkRUZxcm9PMndkZXcvZjl1T2VvYW9ZMwozbWZnVmFTcFpHYTFEd0lEQVFBQm95WXdKREFPQmdOVkhROEJBZjhFQkFNQ0FZWXdFZ1lEVlIwVEFRSC9CQWd3CkJnRUIvd0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUtaU0ZpVkd1dTF0TjFFL0NveEdpWGVVSnludmIKNDNUejBrd0ZhYkczZ0M1QlhVTzdwc2g1aWVVODNkYllXck9IcE5qNW8ycFd6a0dpekU2VE5zZ2g2NFUxSUllQwpUSW9ubFBab2U5T2UvaWs1UjIxRjFTVkhQK0l6dmVGd1FnNXNWZTM2dzlWcm52cnZNcDU0NzVObDcxLzB3dE0vCit0d3hPKzFKMG5hUEd6cEVXelZyMmNMRi9taEFzREpacWZuU08wTVhscUpWSjhhTVZUTStVYWNiSWlQM2hMUXIKa0VRd3g4UW9mMTNOMVY4Ti9leWpUcHlPVzZqREVRWElnK09Iam1BeFBnZ3I1RG9DQksvM3lzZFltWGhJN3p0TwpGQy9zMi9FT1RsQmNzQS83NmhZNkcwUG1ZdnI1ZUxrekc2WklmT25sSFpmVDY5eEJlT08wNDNwdTVBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                "e8e62fe9-b781-48df-832c-27f708fc6442",
                "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRDU4NFh3aElNRnpuZUcKU3F3Ti9qeGN2dC9LWkV6V2JIRnJVeDhsMlZTYmY5cUVQSnN0aW5lUEJ0ak5jUTdhUEp2N0J2WVNVUFpNNUpNRApBZ1RxWGZvcmRCTmdQUUFWYkFqWTd3NUdjL1ROZXQzYWdQTk5UYmY5bDExZk9IZTdtSGRIbW5BZW1QaDhYVk9RCmNhZXAwUTAvcVJBQ1lGVlZWUUFlMWtWQnMxN2Ftd0NvNkkxWEhtQzBrVEdFZUlNWENzUVJGS2h4ZC84d0RBbEEKMkJVTVJ5cU9hMUg1Z0VFZVdrUWZrdGpsT0pWNlBqSW8wbzVLcTVoay9FcGlSZTM3Q0w4dG1WWUNhN2d1dnpSagp1dFRkeFN1L3BGSWxmY3pGSnd4d3NFN2NSQ09NOVg5K1NudXhWYytiRWtyMkVmSVgydGMzOGF1S1hhenplNENPCi9jbS9CdGIzQWdNQkFBRUNnZ0VBQitoNkNPR1FhYXNlSWZ3VDFIK0NObWI5bXFBd3hDbjdMcXViRlMzNm5NN2YKUVliUFhCSUE5V0FBbFFOcU5tSnJodll4NitOdTM0RHQyODhCQzg4OFhvcVdJRm5kdWsvSU9lRGFZVVZDN2d0ZwpvSXlxNWZ1N0FnVjdlVXRHa29OZzVyMk9wWkV1YjNUZWMzZjlGNFRiTi9QbjQwTmIvODZvS2RHYXNGajErOUdTCm9uTXhmenJIZkVPUXNmM0RxcVFDbThwNWxIaXYzUWUvd2MwNTJBSk1zSUo3a2lKalRybTVDRlM2N1dtL21aQ2oKZFdIUVd6NVJja3ZpMnB4QzFoUjV2Rlc5YWhhME5ZLzNUaXdCMm5FRUh0S0RyZXVkUTBJdWlyamFLc2FRZjRqdQo0OC9pbURWRHdsS2Yxa2w3N0tzYTlJNmVxOXRvaktsdjBHZUhNSXNWclFLQmdRRCt5ZmlTYjZXMDlEbHFsR2QrCitrS1ljS292a1VLZTJLY05BRjdjT0ZLYjVMZXYvajQyeW9OMWFKOXJzRThRNlBQZ0lvN1k1NmxJN1M1aVd5RGsKUFk0d3ZCWmpMa0t4byttLzV5UGN0YVM3bXpHcXBPSVQ0aXBRUHVDNTVXdktNRVg2S2JkdDhPTFlrL3pXNkZ1NQpBa1A0bFM0N2JZeUZudHl2OTRlTTduRmg5UUtCZ1FEN0k2cHFWcjBxaXRER2ozWThiRlR5NjRoZHVIdDJPcXp0CnZSeDd4d2ttcTBrVER4UXVYVmVNR1pDdnJIYlJ3VG5sbnlPenhsQXhKTXZaeExVZ0t4TTlxUktnM3VNTUVMVWYKeGpKWUYvZ2VyVW9vaDJ5Wk8vTHh5ZzJ5aEkwLyttcnlVVlNYMVZUbjVJZFQ5dFRnbXIxL2pLZUIxUk5IaTYrNwpiL2tvZnhDRnV3S0JnRGFBZDhiRFVUd1RIaEVaYThZeXZIb2xaNUpEVFcvelFsQzZxcEFMRUVpK3RUaFZkM043CkFJSGwvbXdueTlIL011UFlJSnh2ZWJ2YTJKZzdqQjZtdURyZWtSOW9MdVlXL1JLSzNCWURXUmkwaXZ4SXh2K2YKMnBOTnovNlQvK25CUjhiS2s2MVY0UUNaTDNXOVFKbWp6V3hvWlBwYlpiclRqN3VvaEh0MktoVGRBb0dBZHZvRwptaXBOcEFIdnRxSHdtZCtZdnh6bWxiLzRmYUorbW9LbEk5Ni9ieHBtbkNqZ25yYUo2MDJSUmlpbWdlalF6UC8vCm9nT3BxaDZNbExha09JRXZ0RjZNL0xtYlJ2UURXdkpDbDRtRGVzVU9CUFZqZFpUNUc2TmxxZFV5TmNVbE5YZGkKWkN3azlWZEc1WGhpa2FXOWNOZnA0NUJXZWVhcmNsa3g2UVdKaGxFQ2dZRUF1TitQUEVqaTlnWDhxOU9pUzVRbgpUdkZ1dEoyc1JYaUlweTdPeFd0amtlblVjZ3pLVlhjWmRLcW9UYkZoL2dFWGdwajQ4TmZoUXQyeHh0SnRicHFxClhyb3hTaXAvVWNKS0xwMlJnc3VFZFNlN0huSXhydmUzSnZoYXk1VTREK3BXYjYxK0tiblNHcnZ0K21XS3RpdFgKNmJSQzIrUGhWS2R4NWQ0WUxjR2xUM0U9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K",
                "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVGRENDQXZ5Z0F3SUJBZ0lSQUptaFU2ZGx5bWpVSjNZakMxMHBXTTB3RFFZSktvWklodmNOQVFFTEJRQXcKZ1pveEN6QUpCZ05WQkFZVEFrTk9NUkl3RUFZRFZRUUlEQWxIZFdGdVoyUnZibWN4RHpBTkJnTlZCQWNNQmtOaApiblJ2YmpFVk1CTUdBMVVFQ2d3TVIzSmxaMUJsY214cGJreHBNUkl3RUFZRFZRUUxEQWxEWlhKMFZtRjFiSFF4CkVqQVFCZ05WQkFNTUNVTmxjblJXWVhWc2RERW5NQ1VHQ1NxR1NJYjNEUUVKQVJZWVozSmxaMUJsY214cGJreHAKUUc5MWRHeHZiMnN1WTI5dE1CNFhEVEkxTURNeE5UQTROREkxTlZvWERUSTFNRFF4TkRBNE5ESTFOVm93Z1oweApDekFKQmdOVkJBWVRBa05PTVJJd0VBWURWUVFJREFsSGRXRnVaMlJ2Ym1jeER6QU5CZ05WQkFjTUJrTmhiblJ2CmJqRVZNQk1HQTFVRUNnd01SM0psWjFCbGNteHBia3hwTVJJd0VBWURWUVFMREFsRFpYSjBWbUYxYkhReEZUQVQKQmdOVkJBTU1ER04yTG1kd2JDNWhZeTVqYmpFbk1DVUdDU3FHU0liM0RRRUpBUllZWjNKbFoxQmxjbXhwYmt4cApRRzkxZEd4dmIyc3VZMjl0TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUErZk9GCjhJU0RCYzUzaGtxc0RmNDhYTDdmeW1STTFteHhhMU1mSmRsVW0zL2FoRHliTFlwM2p3Yll6WEVPMmp5Yit3YjIKRWxEMlRPU1RBd0lFNmwzNkszUVRZRDBBRld3STJPOE9SblAwelhyZDJvRHpUVTIzL1pkZFh6aDN1NWgzUjVwdwpIcGo0ZkYxVGtIR25xZEVOUDZrUUFtQlZWVlVBSHRaRlFiTmUycHNBcU9pTlZ4NWd0SkV4aEhpREZ3ckVFUlNvCmNYZi9NQXdKUU5nVkRFY3FqbXRSK1lCQkhscEVINUxZNVRpVmVqNHlLTktPU3F1WVpQeEtZa1h0K3dpL0xabFcKQW11NExyODBZN3JVM2NVcnY2UlNKWDNNeFNjTWNMQk8zRVFqalBWL2ZrcDdzVlhQbXhKSzloSHlGOXJYTi9HcgppbDJzODN1QWp2M0p2d2JXOXdJREFRQUJvMUF3VGpBZEJnTlZIUkVFRmpBVWdneGpkaTVuY0d3dVlXTXVZMjZICkJBb1NBQUV3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFqaG1mQXVNSTdhVDhqWm9oeEowUlRjYTk2TXlTc2JxaAp4TE9IVU8vQ1kvdll5bStGWW44NzE0T1VDdldXeDdYbFJFRnp5MW5qU0xpY3pWTHVZN3o1QTdwMnlqMGtMejhFCk5zVmIrVk83TFNHRmM3a2QwM3BUQzB4cVZoenNidWoxdHVEcHFSTC82RkV1ekRCNUw0aEdXV1JsYXd2OHNBTEQKcjZnOGhDdzNxWS9LOEpBM3RuWDhIUTdWNDYrcW0zeHJIWmVNTG9KeUtIVk5WaUZ3QkpTMU8xamhCelN0Q0NIVQo3cGIrSUVRZjBoZ1lpZnlLR29tUVl2MlJrWEt3NEJNVUIyWm1DU2NSak1SczBrQzQ1Z0JXa2J2QjdKa2Vlc0ppCkxhbHN0c0lFd0pkZEpKWkhRa3diaTN5ejlNNnFwT1A0V2xIcDlaWm5YeUdROFp0RGdjck91QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                90,
                "CertVault");

        GenResponse response = SslCertGenerator.renewSslCertificate(request);

        log.debug(response.toString());
        log.info("New SSL Private Key: \n {}", new String(java.util.Base64.getDecoder().decode(response.getPrivkey())));
        log.info("New SSL Certificate: \n {}", new String(java.util.Base64.getDecoder().decode(response.getCert())));
        log.info("New SSL Certificate Start Date: {}", response.getNotBefore());
        log.info("New SSL Certificate End Date: {}", response.getNotAfter());
    }

}
