package com.gregperlinli.certvault.certificate;

import com.gregperlinli.certvault.domain.entities.CaGenRequest;
import com.gregperlinli.certvault.domain.entities.GenResponse;
import com.gregperlinli.certvault.domain.entities.CaRenewRequest;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Arrays;
import java.util.Base64;

/**
 * TestAPI
 *
 * @author gregPerlinLi
 * @version 1.0.0
 * @className {@code TestAPI}
 * @date 2025/3/15 12:55
 */
@SpringBootTest
@Slf4j
public class CaGeneratorTest {

    @Test
    public void testCaGenerate() {
        CaGenRequest request = new CaGenRequest()
                .setCountry("CN")
                .setProvince("Guangdong")
                .setCity("Canton")
                .setOrganization("GregPerlinLi")
                .setOrganizationalUnit("CertVault")
                .setCommonName("CertVault CA")
                .setEmailAddress("gregPerlinLi@outlook.com")
                .setExpiry(3650)
                .setComment("This is a Test CA.");
        GenResponse response = CaGenerator.generateCaCertificate(request);
        log.debug(response.toString());
        log.info("CA Private Key: \n {}", new String(java.util.Base64.getDecoder().decode(response.getPrivkey())));
        log.info("CA Certificate: \n {}", new String(java.util.Base64.getDecoder().decode(response.getCert())));
        log.info("CA Certificate Start Date: {}", response.getNotBefore());
        log.info("CA Certificate End Date: {}", response.getNotAfter());
        CaGenRequest intRequest = new CaGenRequest()
                .setParentCaPrivkey(response.getPrivkey())
                .setParentCa(response.getCert())
                .setAllowSubCa(true)
                .setCountry("CN")
                .setProvince("Guangdong")
                .setCity("Canton")
                .setOrganization("Test")
                .setOrganizationalUnit("CertVault Test")
                .setCommonName("CertVault Int CA")
                .setEmailAddress("gregPerlinLi@outlook.com")
                .setExpiry(1800)
                .setComment("This is a Test Intermediate CA.");
        response = CaGenerator.generateCaCertificate(intRequest);
        log.debug(response.toString());
        log.info("Intermediate CA Private Key: \n {}", new String(java.util.Base64.getDecoder().decode(response.getPrivkey())));
        log.info("Intermediate CA Certificate: \n {}", new String(java.util.Base64.getDecoder().decode(response.getCert())));
        log.info("Intermediate CA Certificate Start Date: {}", response.getNotBefore());
        log.info("Intermediate CA Certificate End Date: {}", response.getNotAfter());
    }

    @Test
    public void testCaRenew() {
        CaRenewRequest request = new CaRenewRequest()
                .setUuid("c031e94e-33fa-44c3-b18e-e33f6128523d")
                .setOldPrivkey("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRGRxZEhIWENlQW9MTjYKU0dEMzNKcytwMWwxTTQzdzg2aHFuTmNiMWFPajViWmRHSmlSNVRkNklGOXptaTlSVXlKT1k4ZnVoQ3NycXpGWgo0aWx5WTVRQ1dmZk5aR0tDZkZEMmpmb1lmenNsd2pDcmxyQnJkQlVvNExmRnFRY2hSTVFGUXRHeHJaZWpoRUNLCkJUZVRFTEYxYmU3R0szTkpBVUFtUitsTDFDclI1SVdmZW5peCs1T3h2eUdQbFNWT0hMd1BHSk0ybUxwM3dTcFEKNlNSNnJSL0hWdUVYdkhQaTVyakROMDFwZ25QUlgvRTI3cFhQNCtIRmFuR1U4QzNjRnloa3lIWkNWcHc1dGF2RQo5M2dvekl1V1YvaXVKcDN6YnFQay91MkxCUTFVdFBoUElockVmeXRlNEFBWFlJbUlacWVic3YxVHRCUll6eW02ClpmRmYxdzRUQWdNQkFBRUNnZ0VBQTJsVTBZV1Q1VkhSZHo0UVh4a1ZLQTZNWjRFYTZobTQzVm0wRTB3NG5naUEKZC9kdjhNc0hpSjg3Y2J0aytPTWNVdnI1Q3FPT0JxOEc0Z3RLaXd0dzZ6cEZpZkxGbWN2OUhZVnBNaEVzWnp4VApyaXc1UnUvYzU4MDV1Y3JKMW1DY0pqaTZIZnBDdnpvT3NXak9Mc2tRSWgzNmRUQjRtSWFQR3ZjZ2xhU1Z6bGgzCm5XV2dkR2NuN2tmL2I1bUltbzhBa1BVL3ZqTnB3SG1GRTNhWEtNV3MvbEJPeU5kMDg3NzVnS05BOWJKTlJlWjkKZUtLSDZjMUFHQkYzN3Nlc3BNSklwMTZFSGNRVHNWZWFBdGRBU0Z5RnJrTmRpU2QyRlRXQ1VLMHpxZUQ5a3d3WgpUQTEraGZNcW5XSlFuVVEwNHQxbTFObmVJRWphMkFzS296TWpVK0crU1FLQmdRRHdsU3hneE9EOERnbkpVbG9XCkxGSlY3eDVEZUVBR0VlNGZ0NzdVYTBkVkQ3NUFmYm8yRWF1VExNRUQ4VGExUGkyNWx0czZpdmVHTmN1WitNcVcKd0FVSHJ3TEpuR0lVdFlhV0I5RFNmUit4T05NSVlaUzFqaTdvWmhuTHdtTVcyME8raXVhYytEK1dBL1FjV2JyTwpYM3cvY05xeWVFSisySEdKQ3h6YTJzV21aUUtCZ1FEcjNrVFRJdDZOV1JHZjVabFAxdWRxRXVJS1c2Mm1JTmRsCkhtQzVUSlJXRFU2MHlLclN6dnZ4Q09PQ0wzMVBsS05jRmZTZzdSS3VZY1h0dmJzSzRMNnBIMFJURHB0OFRIcFcKMFcxQ2IzTWE5QWthTktXVU9VaWRRNWFzd2NoeUZGdktQOHZ6Y1lVSDdaTlVTT2NjQlpUek9vSE9OUmNoR3BiQwpiOElwajFWL0Z3S0JnR3dXV1MzUXhsUDM2cVdzZmhUZ0xNMjI5SjNUZE5CRlZmcWlEdlpZakYvSEJ1N3FqYktsCkZiUzFzcklXdVVHTWdmYVR0RU1GRkZnVDZ6bHQ4WGJ4SmxGaGE1c3d5MUFLamtEeG1mdzNndm1ZVWhlOTM1WUMKSDBrQ05peTVWTk44QjErZ0FDUWQxRk9OeXlyQmxaQUtqa1BpYkI4cXNKVlVvUTIxRkcydlJJV1JBb0dCQU9GSQpsdXdqTGZaTDBHMnMydFpMS1JWRG0rclF6ZmNTL3loeDcyaU5JRkZndklBbitpRUgyZFBLN2FKMndYVzFQcUxCCnhibS9Oa3lnem0vWS9FSFRqOGZ4T1UwcmNvOHliTmRuaUxnZnd3MUhjVG82ZHJ3d1NvOEs4MnRtVzVHNnFFRncKMWRoYjRQaEZqcWErU3grVXBVUDc2ZWVQQmR4MGpQS0IxQzNsM1g5WkFvR0JBTFkveEhJS2dlcUdERWxPNXRVSApSTFNiS2c0Sm00dHVWSGM0THFUZytic0JKaGhRNSt5WEVyS2x2R1JvYThTRlFtMDJUVVVsbE1FMTVjQkkvUFpxCk01cmN6RmtYdmdlZFRVVytFYWI0ZDV6a2lYbkRZeGw2UU5hVElLWjhDNm51R0JBVVVuMmV1VHN3SnNZaWR4T3kKdU94SDFDWlhqSUIrM2RnVTE0LytnSTk0Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K")
                .setOldCert("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ2akNDQXRLZ0F3SUJBZ0lSQUxtU2M3UFIydWQxeXBjdjN6NE5OTEV3RFFZSktvWklodmNOQVFFTEJRQXcKZ1oweEN6QUpCZ05WQkFZVEFrTk9NUkl3RUFZRFZRUUlEQWxIZFdGdVoyUnZibWN4RHpBTkJnTlZCQWNNQmtOaApiblJ2YmpFVk1CTUdBMVVFQ2d3TVIzSmxaMUJsY214cGJreHBNUkl3RUFZRFZRUUxEQWxEWlhKMFZtRjFiSFF4CkZUQVRCZ05WQkFNTURFTmxjblJXWVhWc2RDQkRRVEVuTUNVR0NTcUdTSWIzRFFFSkFSWVlaM0psWjFCbGNteHAKYmt4cFFHOTFkR3h2YjJzdVkyOXRNQjRYRFRJMU1ETXlNakU1TVRFMU1Wb1hEVE0xTURNeU1ERTVNVEUxTVZvdwpnWjB4Q3pBSkJnTlZCQVlUQWtOT01SSXdFQVlEVlFRSURBbEhkV0Z1WjJSdmJtY3hEekFOQmdOVkJBY01Ca05oCmJuUnZiakVWTUJNR0ExVUVDZ3dNUjNKbFoxQmxjbXhwYmt4cE1SSXdFQVlEVlFRTERBbERaWEowVm1GMWJIUXgKRlRBVEJnTlZCQU1NREVObGNuUldZWFZzZENCRFFURW5NQ1VHQ1NxR1NJYjNEUUVKQVJZWVozSmxaMUJsY214cApia3hwUUc5MWRHeHZiMnN1WTI5dE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCjNhblJ4MXduZ0tDemVraGc5OXliUHFkWmRUT044UE9vYXB6WEc5V2pvK1cyWFJpWWtlVTNlaUJmYzVvdlVWTWkKVG1QSDdvUXJLNnN4V2VJcGNtT1VBbG4zeldSaWdueFE5bzM2R0g4N0pjSXdxNWF3YTNRVktPQzN4YWtISVVURQpCVUxSc2EyWG80UkFpZ1Uza3hDeGRXM3V4aXR6U1FGQUprZnBTOVFxMGVTRm4zcDRzZnVUc2I4aGo1VWxUaHk4CkR4aVROcGk2ZDhFcVVPa2tlcTBmeDFiaEY3eHo0dWE0d3pkTmFZSnowVi94TnU2VnorUGh4V3B4bFBBdDNCY28KWk1oMlFsYWNPYldyeFBkNEtNeUxsbGY0cmlhZDgyNmo1UDd0aXdVTlZMVDRUeUlheEg4clh1QUFGMkNKaUdhbgptN0w5VTdRVVdNOHB1bVh4WDljT0V3SURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQVlZd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUF0WXloZmJWVnBIR1hTWmxaTWdrM0N4bGgKSXl0V2R3QmRLT293dWlVRGZrQ2NQSisycmdJTzdHQ2RXbjQxd2ZBUkxYdklYYmNPeElweVBsRWRMK3hkdG53ZQpBUm5UVGdpb3pZV3JXYUJEaEdwMVVYZkllWHV6ZDFJdDNTR3RKanJ2dmRra0xxbytPUG1MOWFSRXp3UzZleGU0CnRrUTlrdEo1MmRmMWV5SDdwWkd2UzNRSzBNL3JzNXhCdVVhQlVjWW9mbGF0ME1RY0pldTRGTXhuQzVWNmc3RGUKNEZlVnRNV0NBdERBNGJwMnZqWk9icVJqeGhRTUJNTkluRmRVVUhoWG4xaDlqZ3o3eW9jeGN1akE1TGVOR1B3awpBSTVYRExTeWhzNDNTdDRPME9nbDhFcXVXZjRlMG5IOU1OMExXSXp4bUdjcW9WY0lBb3pWemhhTTQ4N2hGdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K")
                .setNewExpiry(3650)
                .setComment("Renewed CA.");
        GenResponse response = CaGenerator.renewCaCertificate(request);
        log.debug(response.toString());
        log.info("New CA Private Key: \n {}", new String(java.util.Base64.getDecoder().decode(response.getPrivkey())));
        log.info("New CA Certificate: \n {}", new String(java.util.Base64.getDecoder().decode(response.getCert())));
        log.info("New CA Certificate Start Date: {}", response.getNotBefore());
        log.info("New CA Certificate End Date: {}", response.getNotAfter());
        CaRenewRequest intRequest = new CaRenewRequest()
                .setUuid("5c266bce-ee47-4d64-85c6-295e889f8060")
                .setParentCaPrivkey("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRGRxZEhIWENlQW9MTjYKU0dEMzNKcytwMWwxTTQzdzg2aHFuTmNiMWFPajViWmRHSmlSNVRkNklGOXptaTlSVXlKT1k4ZnVoQ3NycXpGWgo0aWx5WTVRQ1dmZk5aR0tDZkZEMmpmb1lmenNsd2pDcmxyQnJkQlVvNExmRnFRY2hSTVFGUXRHeHJaZWpoRUNLCkJUZVRFTEYxYmU3R0szTkpBVUFtUitsTDFDclI1SVdmZW5peCs1T3h2eUdQbFNWT0hMd1BHSk0ybUxwM3dTcFEKNlNSNnJSL0hWdUVYdkhQaTVyakROMDFwZ25QUlgvRTI3cFhQNCtIRmFuR1U4QzNjRnloa3lIWkNWcHc1dGF2RQo5M2dvekl1V1YvaXVKcDN6YnFQay91MkxCUTFVdFBoUElockVmeXRlNEFBWFlJbUlacWVic3YxVHRCUll6eW02ClpmRmYxdzRUQWdNQkFBRUNnZ0VBQTJsVTBZV1Q1VkhSZHo0UVh4a1ZLQTZNWjRFYTZobTQzVm0wRTB3NG5naUEKZC9kdjhNc0hpSjg3Y2J0aytPTWNVdnI1Q3FPT0JxOEc0Z3RLaXd0dzZ6cEZpZkxGbWN2OUhZVnBNaEVzWnp4VApyaXc1UnUvYzU4MDV1Y3JKMW1DY0pqaTZIZnBDdnpvT3NXak9Mc2tRSWgzNmRUQjRtSWFQR3ZjZ2xhU1Z6bGgzCm5XV2dkR2NuN2tmL2I1bUltbzhBa1BVL3ZqTnB3SG1GRTNhWEtNV3MvbEJPeU5kMDg3NzVnS05BOWJKTlJlWjkKZUtLSDZjMUFHQkYzN3Nlc3BNSklwMTZFSGNRVHNWZWFBdGRBU0Z5RnJrTmRpU2QyRlRXQ1VLMHpxZUQ5a3d3WgpUQTEraGZNcW5XSlFuVVEwNHQxbTFObmVJRWphMkFzS296TWpVK0crU1FLQmdRRHdsU3hneE9EOERnbkpVbG9XCkxGSlY3eDVEZUVBR0VlNGZ0NzdVYTBkVkQ3NUFmYm8yRWF1VExNRUQ4VGExUGkyNWx0czZpdmVHTmN1WitNcVcKd0FVSHJ3TEpuR0lVdFlhV0I5RFNmUit4T05NSVlaUzFqaTdvWmhuTHdtTVcyME8raXVhYytEK1dBL1FjV2JyTwpYM3cvY05xeWVFSisySEdKQ3h6YTJzV21aUUtCZ1FEcjNrVFRJdDZOV1JHZjVabFAxdWRxRXVJS1c2Mm1JTmRsCkhtQzVUSlJXRFU2MHlLclN6dnZ4Q09PQ0wzMVBsS05jRmZTZzdSS3VZY1h0dmJzSzRMNnBIMFJURHB0OFRIcFcKMFcxQ2IzTWE5QWthTktXVU9VaWRRNWFzd2NoeUZGdktQOHZ6Y1lVSDdaTlVTT2NjQlpUek9vSE9OUmNoR3BiQwpiOElwajFWL0Z3S0JnR3dXV1MzUXhsUDM2cVdzZmhUZ0xNMjI5SjNUZE5CRlZmcWlEdlpZakYvSEJ1N3FqYktsCkZiUzFzcklXdVVHTWdmYVR0RU1GRkZnVDZ6bHQ4WGJ4SmxGaGE1c3d5MUFLamtEeG1mdzNndm1ZVWhlOTM1WUMKSDBrQ05peTVWTk44QjErZ0FDUWQxRk9OeXlyQmxaQUtqa1BpYkI4cXNKVlVvUTIxRkcydlJJV1JBb0dCQU9GSQpsdXdqTGZaTDBHMnMydFpMS1JWRG0rclF6ZmNTL3loeDcyaU5JRkZndklBbitpRUgyZFBLN2FKMndYVzFQcUxCCnhibS9Oa3lnem0vWS9FSFRqOGZ4T1UwcmNvOHliTmRuaUxnZnd3MUhjVG82ZHJ3d1NvOEs4MnRtVzVHNnFFRncKMWRoYjRQaEZqcWErU3grVXBVUDc2ZWVQQmR4MGpQS0IxQzNsM1g5WkFvR0JBTFkveEhJS2dlcUdERWxPNXRVSApSTFNiS2c0Sm00dHVWSGM0THFUZytic0JKaGhRNSt5WEVyS2x2R1JvYThTRlFtMDJUVVVsbE1FMTVjQkkvUFpxCk01cmN6RmtYdmdlZFRVVytFYWI0ZDV6a2lYbkRZeGw2UU5hVElLWjhDNm51R0JBVVVuMmV1VHN3SnNZaWR4T3kKdU94SDFDWlhqSUIrM2RnVTE0LytnSTk0Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K")
                .setParentCa("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ2akNDQXRLZ0F3SUJBZ0lSQUxtU2M3UFIydWQxeXBjdjN6NE5OTEV3RFFZSktvWklodmNOQVFFTEJRQXcKZ1oweEN6QUpCZ05WQkFZVEFrTk9NUkl3RUFZRFZRUUlEQWxIZFdGdVoyUnZibWN4RHpBTkJnTlZCQWNNQmtOaApiblJ2YmpFVk1CTUdBMVVFQ2d3TVIzSmxaMUJsY214cGJreHBNUkl3RUFZRFZRUUxEQWxEWlhKMFZtRjFiSFF4CkZUQVRCZ05WQkFNTURFTmxjblJXWVhWc2RDQkRRVEVuTUNVR0NTcUdTSWIzRFFFSkFSWVlaM0psWjFCbGNteHAKYmt4cFFHOTFkR3h2YjJzdVkyOXRNQjRYRFRJMU1ETXlNakU1TVRFMU1Wb1hEVE0xTURNeU1ERTVNVEUxTVZvdwpnWjB4Q3pBSkJnTlZCQVlUQWtOT01SSXdFQVlEVlFRSURBbEhkV0Z1WjJSdmJtY3hEekFOQmdOVkJBY01Ca05oCmJuUnZiakVWTUJNR0ExVUVDZ3dNUjNKbFoxQmxjbXhwYmt4cE1SSXdFQVlEVlFRTERBbERaWEowVm1GMWJIUXgKRlRBVEJnTlZCQU1NREVObGNuUldZWFZzZENCRFFURW5NQ1VHQ1NxR1NJYjNEUUVKQVJZWVozSmxaMUJsY214cApia3hwUUc5MWRHeHZiMnN1WTI5dE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCjNhblJ4MXduZ0tDemVraGc5OXliUHFkWmRUT044UE9vYXB6WEc5V2pvK1cyWFJpWWtlVTNlaUJmYzVvdlVWTWkKVG1QSDdvUXJLNnN4V2VJcGNtT1VBbG4zeldSaWdueFE5bzM2R0g4N0pjSXdxNWF3YTNRVktPQzN4YWtISVVURQpCVUxSc2EyWG80UkFpZ1Uza3hDeGRXM3V4aXR6U1FGQUprZnBTOVFxMGVTRm4zcDRzZnVUc2I4aGo1VWxUaHk4CkR4aVROcGk2ZDhFcVVPa2tlcTBmeDFiaEY3eHo0dWE0d3pkTmFZSnowVi94TnU2VnorUGh4V3B4bFBBdDNCY28KWk1oMlFsYWNPYldyeFBkNEtNeUxsbGY0cmlhZDgyNmo1UDd0aXdVTlZMVDRUeUlheEg4clh1QUFGMkNKaUdhbgptN0w5VTdRVVdNOHB1bVh4WDljT0V3SURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQVlZd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUF0WXloZmJWVnBIR1hTWmxaTWdrM0N4bGgKSXl0V2R3QmRLT293dWlVRGZrQ2NQSisycmdJTzdHQ2RXbjQxd2ZBUkxYdklYYmNPeElweVBsRWRMK3hkdG53ZQpBUm5UVGdpb3pZV3JXYUJEaEdwMVVYZkllWHV6ZDFJdDNTR3RKanJ2dmRra0xxbytPUG1MOWFSRXp3UzZleGU0CnRrUTlrdEo1MmRmMWV5SDdwWkd2UzNRSzBNL3JzNXhCdVVhQlVjWW9mbGF0ME1RY0pldTRGTXhuQzVWNmc3RGUKNEZlVnRNV0NBdERBNGJwMnZqWk9icVJqeGhRTUJNTkluRmRVVUhoWG4xaDlqZ3o3eW9jeGN1akE1TGVOR1B3awpBSTVYRExTeWhzNDNTdDRPME9nbDhFcXVXZjRlMG5IOU1OMExXSXp4bUdjcW9WY0lBb3pWemhhTTQ4N2hGdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K")
                .setOldPrivkey("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRQzR4L3QxSmNPTm1hUkQKdHdqdURIV01DSFpiZElvYTBQWGUxc0UxaTVZT2xzeVc5OWE2N3MyQjNnNkVzNm91YkhMcjl5bDJ6SzY1bFZXbgpiMDQrTUhWYndaTzdCdUl5a3FuU01KY3dLekFiMEs4cy9pbjhOY05kcUtZR0s4N3dvVkgyMHhnZlVpUEFvSjF4ClY3SnlwR1d5WWtnQnY0R2VSUmpiV21UbmlManhuVGJnTVdHS25OQnhUZTB5SjJWRVh6UXhaQWR5S0tieFk1WnoKc3hid0U4TDk5ZkxsdGIreUMwQXM4VU1yYXkvY3JWRzJVQWdWQjRNL3drc3QxdTg5bHNhVXV1L2hEdEdvMitNcAo4czZjRVE4NXNpZGtsTEorNEZDcjhXY1F1K2wrNERCVlA5ZG5Hc29PMk1EbkNDNnRnWXNmTm5mYjdmSzdJVnQzCjBsdFRENFozQWdNQkFBRUNnZ0VBRmxaaWtRcFVKZ0Y5U0l4UFlZdVRDQzhiczdtV1dtQ0pZSHRnbHVyOVpGMFoKZFdTWGlqaUZFbDU0TGRXVVRKRmlvU0RiVzllcGhaakdabnUvbnlmM2YvU2FPY0UreGZOUjRTMXJrWENmRzdXeAovNFBvS211TFp2NlV0MmxEVm5hQjlJOFhPdTRRa1dBNU9ETHNTUXlUbUtsbDRBUTVGSnR3d2srZXBCaTBsc3gvCjZsbkdiRHFCRkYwdjBmTXgrM0RZcE1uWUE2TmFoQzZPQ2hlcG5FZlV0Y0s3SjA2UFN0MVh0Y3l5Z3dXTFlnSHAKWEZnb0VTVU92Qlk1RXZEWUpGbyt0dFgvRS9TYWthRG5tUGtEOHJUYVFtS29nOVgxN0JVcFJNYXh4RDN1ZlVDMwpYUTBLYXc1aDN6VFRyTE5vV2ZZdDlhUFlFUUZsRG9sUE1jT0tIc3BnVFFLQmdRRDdlKzVFdFZIMkxBWURFRmpaClpvOEVRakJ1T25BYmFGd3RJaEsvTXBjWWhJVm1CNi9UR1ZjS1ArR3hBU2dpMW1vVHZoVGxCNHczdUZpV3ViaWcKRVI3aGZKU29OK2dJM3FmaGYwQ0h3cUNRait5c21BSFdXQWRlK0lYeXpadW1sTG1vdlY2eWJLZnlkNkorekpmZApiMEFIWnJoWlB0YW1MQUtLSDE3UlVucjdJd0tCZ1FDOEdXdEUxaXJONWlTS3dYY0xlMzErMXFUZzB1eTFuekdDCkZRQWs4aWk3clpoRUNGQmk2Y0cvVlNUak12ZnRHUFpmcGREcEkxSTZwQWNJSjd1bnFCWGpKeWJ4ODdVOFRTc3gKbzdKc3VxOFI4RE5JVjY2YnlHVE12SjB1dWdQeW5GM01IdDdKWGlRSWNmTFhSb2IzbENpN3BPclVnakVSRXEvdAptZFJGbWQrV25RS0JnUUN1dVJzQkY2MGJTTmpnZGhJVThZRjU1dmE1RHRibTQrbnUzWmFDeW9aWjNYREZRNS93CkhkSHdhQlBKSTlHYjZyYUdndkVIY3VnRHFvdTZKTXpXUVM3Z1lPcnp1T3Y0aGFIRU5PSkRzSUJZRC9iU3IwWFAKZ3hlVDd6MDVSWXJZQU1yQkp0ak5SRnFuUm1GYWtaRU5vd2FzWGJ6RkhMaUxlVlpHV3FkSTdYSk9Xd0tCZ1FDYQorbUtNWTl6K3FtbGZQY21FMTJsdDBSSWwvd056SFVmZ1FzZE1xWXp3SFRhQWowMFVRajhWRXVVQ29TTHU0Z3RVCmdUMWdhVzY5ekJuVEdWR2U4SG1nSDhrUnZ0ZUxhSlYzSDhYSm1nTFd4ODZwQXoxbE16WUNEa0YvbDFuYlVnUmkKUXVrU2hwTXZ0aHI4VGlxejRBbXptVXkyYk5KYW04Z0IveVdMZHgxbWJRS0JnUUNzSlE0dEF1YVZqNWUzYzRDaApxOGFDaW84WjIybmFza2VOUTJaRDFMdEw5VnNWMEljNHd5dUpkVVgrc1U1eTBZTThrbHdsbmFONUtzZmdMeTA2CllnTHFxNEhHMVRuSi9rbWVCemZCWldoT0drZjRyaktuNlVSWW5lM0FOOTB1WnBXREVCdnhtdlNCTDQrTkxaTm8KNmhMZEhYWFJocllscXBFK2orRDExWHkrVWc9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==")
                .setOldCert("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ3akNDQXRhZ0F3SUJBZ0lSQUxxY2xRYlVqNG9kZXcwS2ZoNERTTU13RFFZSktvWklodmNOQVFFTEJRQXcKZ1oweEN6QUpCZ05WQkFZVEFrTk9NUkl3RUFZRFZRUUlEQWxIZFdGdVoyUnZibWN4RHpBTkJnTlZCQWNNQmtOaApiblJ2YmpFVk1CTUdBMVVFQ2d3TVIzSmxaMUJsY214cGJreHBNUkl3RUFZRFZRUUxEQWxEWlhKMFZtRjFiSFF4CkZUQVRCZ05WQkFNTURFTmxjblJXWVhWc2RDQkRRVEVuTUNVR0NTcUdTSWIzRFFFSkFSWVlaM0psWjFCbGNteHAKYmt4cFFHOTFkR3h2YjJzdVkyOXRNQjRYRFRJMU1ETXlNakU1TVRFMU1sb1hEVE13TURJeU5ERTVNVEUxTWxvdwpnWjR4Q3pBSkJnTlZCQVlUQWtOT01SSXdFQVlEVlFRSURBbEhkV0Z1WjJSdmJtY3hEekFOQmdOVkJBY01Ca05oCmJuUnZiakVOTUFzR0ExVUVDZ3dFVkdWemRERVhNQlVHQTFVRUN3d09RMlZ5ZEZaaGRXeDBJRlJsYzNReEdUQVgKQmdOVkJBTU1FRU5sY25SV1lYVnNkQ0JKYm5RZ1EwRXhKekFsQmdrcWhraUc5dzBCQ1FFV0dHZHlaV2RRWlhKcwphVzVNYVVCdmRYUnNiMjlyTG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCCkFMakgrM1VsdzQyWnBFTzNDTzRNZFl3SWRsdDBpaHJROWQ3V3dUV0xsZzZXekpiMzFycnV6WUhlRG9TenFpNXMKY3V2M0tYYk1ycm1WVmFkdlRqNHdkVnZCazdzRzRqS1NxZEl3bHpBck1CdlFyeXorS2Z3MXcxMm9wZ1lyenZDaApVZmJUR0I5U0k4Q2duWEZYc25La1piSmlTQUcvZ1o1RkdOdGFaT2VJdVBHZE51QXhZWXFjMEhGTjdUSW5aVVJmCk5ERmtCM0lvcHZGamxuT3pGdkFUd3YzMTh1VzF2N0lMUUN6eFF5dHJMOXl0VWJaUUNCVUhnei9DU3kzVzd6MlcKeHBTNjcrRU8wYWpiNHlueXpwd1JEem15SjJTVXNuN2dVS3Z4WnhDNzZYN2dNRlUvMTJjYXlnN1l3T2NJTHEyQgppeDgyZDl2dDhyc2hXM2ZTVzFNUGhuY0NBd0VBQWFNbU1DUXdEZ1lEVlIwUEFRSC9CQVFEQWdHR01CSUdBMVVkCkV3RUIvd1FJTUFZQkFmOENBUUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQU5OclJ4Mm9aT01abk0yOXl6REwKWERqcmRwbTZQVmpocXNiMVVzelp6OFVmZFN3bmFOYllOclgzZXowSlZRNm9PSTg0RjJyTVc5U0dsWlcwT2hNVQpZdE9YeFdlWVlQRjFKWEVRTGN3TkJST1RkeDdqT29BVDVOUDZlcFZ1eUZ0Y2FPenJ4dXE2cGZMRXhoNUNrYWxPCkMza3hQa2h5Q0V1ekFCRTNzY2xsUUJ1aWdZTldOSnY5NDMvQTlZS05NaWtPUkxGSDlBTE9qKzNPWU5uWVY4RDMKWlU2RnJiUVVTYnpscEduOWFZRHNPTG5LTXBrSGpkVUhXRk5ycWxHdC95S1VyejVycVhNSFFGb1ozNkd6MEhwYgpvckYvKzJ3MFFPYmx3NmRqVzBQbnZBZE16cDdMcklXMk42cVd1WjdtYUF5Q1F2RnppMzNzUlhmTE5KbkRVR05UClBkST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=")
                .setNewExpiry(1500)
                .setComment("Renewed Int CA.");
        response = CaGenerator.renewCaCertificate(intRequest);
        log.debug(response.toString());
        log.info("New Int CA Private Key: \n {}", new String(java.util.Base64.getDecoder().decode(response.getPrivkey())));
        log.info("New Int CA Certificate: \n {}", new String(java.util.Base64.getDecoder().decode(response.getCert())));
        log.info("New Int CA Certificate Start Date: {}", response.getNotBefore());
        log.info("New Int CA Certificate End Date: {}", response.getNotAfter());
    }
}
